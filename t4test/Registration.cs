    container.RegisterType<IALL_SL_INSP_COMMENTSRepository, ALL_SL_INSP_COMMENTSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SL_INSP_COMMENTSApplicationService, ALL_SL_INSP_COMMENTSApplicationService>();
    container.RegisterType<IALL_SL_INSP_FURINSPREQRepository, ALL_SL_INSP_FURINSPREQRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SL_INSP_FURINSPREQApplicationService, ALL_SL_INSP_FURINSPREQApplicationService>();
    container.RegisterType<IALL_SL_INSP_POSITIONSRepository, ALL_SL_INSP_POSITIONSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SL_INSP_POSITIONSApplicationService, ALL_SL_INSP_POSITIONSApplicationService>();
    container.RegisterType<IALL_SL_INSP_RATINGSRepository, ALL_SL_INSP_RATINGSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SL_INSP_RATINGSApplicationService, ALL_SL_INSP_RATINGSApplicationService>();
    container.RegisterType<IALL_SL_INSPECTIONRepository, ALL_SL_INSPECTIONRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SL_INSPECTIONApplicationService, ALL_SL_INSPECTIONApplicationService>();
    container.RegisterType<IALL_SL_INV_LOCATIONRepository, ALL_SL_INV_LOCATIONRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SL_INV_LOCATIONApplicationService, ALL_SL_INV_LOCATIONApplicationService>();
    container.RegisterType<IALL_SL_INV_ORIENTATIONRepository, ALL_SL_INV_ORIENTATIONRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SL_INV_ORIENTATIONApplicationService, ALL_SL_INV_ORIENTATIONApplicationService>();
    container.RegisterType<IALL_SLOPEIDSRepository, ALL_SLOPEIDSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IALL_SLOPEIDSApplicationService, ALL_SLOPEIDSApplicationService>();
    container.RegisterType<IBR_SL_INV_ACCESSFACTRepository, BR_SL_INV_ACCESSFACTRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IBR_SL_INV_ACCESSFACTApplicationService, BR_SL_INV_ACCESSFACTApplicationService>();
    container.RegisterType<IBR_SL_INV_DIMENSIONSRepository, BR_SL_INV_DIMENSIONSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IBR_SL_INV_DIMENSIONSApplicationService, BR_SL_INV_DIMENSIONSApplicationService>();
    container.RegisterType<IBR_SL_INV_NOSPARepository, BR_SL_INV_NOSPARepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<IBR_SL_INV_NOSPAApplicationService, BR_SL_INV_NOSPAApplicationService>();
    container.RegisterType<ICU_SL_INV_ACCESSFACTRepository, CU_SL_INV_ACCESSFACTRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ICU_SL_INV_ACCESSFACTApplicationService, CU_SL_INV_ACCESSFACTApplicationService>();
    container.RegisterType<ICU_SL_INV_CELLRepository, CU_SL_INV_CELLRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ICU_SL_INV_CELLApplicationService, CU_SL_INV_CELLApplicationService>();
    container.RegisterType<ICU_SL_INV_DIMENSIONSRepository, CU_SL_INV_DIMENSIONSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ICU_SL_INV_DIMENSIONSApplicationService, CU_SL_INV_DIMENSIONSApplicationService>();
    container.RegisterType<ICU_SL_INV_NOCELLSRepository, CU_SL_INV_NOCELLSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ICU_SL_INV_NOCELLSApplicationService, CU_SL_INV_NOCELLSApplicationService>();
    container.RegisterType<ISL_ALLOCATIONRepository, SL_ALLOCATIONRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_ALLOCATIONApplicationService, SL_ALLOCATIONApplicationService>();
    container.RegisterType<ISL_ALLOCATION_EXCEPTIONRepository, SL_ALLOCATION_EXCEPTIONRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_ALLOCATION_EXCEPTIONApplicationService, SL_ALLOCATION_EXCEPTIONApplicationService>();
    container.RegisterType<ISL_COMMIT_HISTORYRepository, SL_COMMIT_HISTORYRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_COMMIT_HISTORYApplicationService, SL_COMMIT_HISTORYApplicationService>();
    container.RegisterType<ISL_INSP_TEMPLATERepository, SL_INSP_TEMPLATERepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_TEMPLATEApplicationService, SL_INSP_TEMPLATEApplicationService>();
    container.RegisterType<ISL_INSPCYCLERepository, SL_INSPCYCLERepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSPCYCLEApplicationService, SL_INSPCYCLEApplicationService>();
    container.RegisterType<ISL_INSPCYCLE_LINKRepository, SL_INSPCYCLE_LINKRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSPCYCLE_LINKApplicationService, SL_INSPCYCLE_LINKApplicationService>();
    container.RegisterType<ISL_OWNER_AUTHORITYRepository, SL_OWNER_AUTHORITYRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_OWNER_AUTHORITYApplicationService, SL_OWNER_AUTHORITYApplicationService>();
    container.RegisterType<ISL_PACKAGERepository, SL_PACKAGERepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGEApplicationService, SL_PACKAGEApplicationService>();
    container.RegisterType<ISL_PACKAGE_LOCATIONRepository, SL_PACKAGE_LOCATIONRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGE_LOCATIONApplicationService, SL_PACKAGE_LOCATIONApplicationService>();
    container.RegisterType<ISL_PACKAGE_SLOPE_LINKRepository, SL_PACKAGE_SLOPE_LINKRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGE_SLOPE_LINKApplicationService, SL_PACKAGE_SLOPE_LINKApplicationService>();
    container.RegisterType<ISL_PACKAGE_SLOPE_SIGNOFFRepository, SL_PACKAGE_SLOPE_SIGNOFFRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGE_SLOPE_SIGNOFFApplicationService, SL_PACKAGE_SLOPE_SIGNOFFApplicationService>();
    container.RegisterType<ISL_PACKAGE_SLOPE_STATUSRepository, SL_PACKAGE_SLOPE_STATUSRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGE_SLOPE_STATUSApplicationService, SL_PACKAGE_SLOPE_STATUSApplicationService>();
    container.RegisterType<ISL_SLOPE_LOCKRepository, SL_SLOPE_LOCKRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_SLOPE_LOCKApplicationService, SL_SLOPE_LOCKApplicationService>();
    container.RegisterType<ISL_INSP_ALLOC_STRUCT_VWRepository, SL_INSP_ALLOC_STRUCT_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_ALLOC_STRUCT_VWApplicationService, SL_INSP_ALLOC_STRUCT_VWApplicationService>();
    container.RegisterType<ISL_INSP_ALLOCATIONS_EX_VWRepository, SL_INSP_ALLOCATIONS_EX_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_ALLOCATIONS_EX_VWApplicationService, SL_INSP_ALLOCATIONS_EX_VWApplicationService>();
    container.RegisterType<ISL_INSP_ALLOCATIONS_VWRepository, SL_INSP_ALLOCATIONS_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_ALLOCATIONS_VWApplicationService, SL_INSP_ALLOCATIONS_VWApplicationService>();
    container.RegisterType<ISL_INSP_COMMENTS_VWRepository, SL_INSP_COMMENTS_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_COMMENTS_VWApplicationService, SL_INSP_COMMENTS_VWApplicationService>();
    container.RegisterType<ISL_INSP_DIMENSIONCHANGED_VWRepository, SL_INSP_DIMENSIONCHANGED_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_DIMENSIONCHANGED_VWApplicationService, SL_INSP_DIMENSIONCHANGED_VWApplicationService>();
    container.RegisterType<ISL_INSP_FLAGS_VWRepository, SL_INSP_FLAGS_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_FLAGS_VWApplicationService, SL_INSP_FLAGS_VWApplicationService>();
    container.RegisterType<ISL_INSP_INCOMPLETE_VWRepository, SL_INSP_INCOMPLETE_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_INCOMPLETE_VWApplicationService, SL_INSP_INCOMPLETE_VWApplicationService>();
    container.RegisterType<ISL_INSP_NEEDED_VWRepository, SL_INSP_NEEDED_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_NEEDED_VWApplicationService, SL_INSP_NEEDED_VWApplicationService>();
    container.RegisterType<ISL_INSP_SPANCELLSCHANGED_VWRepository, SL_INSP_SPANCELLSCHANGED_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_SPANCELLSCHANGED_VWApplicationService, SL_INSP_SPANCELLSCHANGED_VWApplicationService>();
    container.RegisterType<ISL_INSP_STATUSCHANGED_VWRepository, SL_INSP_STATUSCHANGED_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_STATUSCHANGED_VWApplicationService, SL_INSP_STATUSCHANGED_VWApplicationService>();
    container.RegisterType<ISL_INSP_UNABLE_VWRepository, SL_INSP_UNABLE_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_INSP_UNABLE_VWApplicationService, SL_INSP_UNABLE_VWApplicationService>();
    container.RegisterType<ISL_PACKAGE_ORG_SLOPE_VWRepository, SL_PACKAGE_ORG_SLOPE_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGE_ORG_SLOPE_VWApplicationService, SL_PACKAGE_ORG_SLOPE_VWApplicationService>();
    container.RegisterType<ISL_PACKAGE_ORG_VWRepository, SL_PACKAGE_ORG_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGE_ORG_VWApplicationService, SL_PACKAGE_ORG_VWApplicationService>();
    container.RegisterType<ISL_PACKAGE_SLOPE_LINK_VWRepository, SL_PACKAGE_SLOPE_LINK_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_PACKAGE_SLOPE_LINK_VWApplicationService, SL_PACKAGE_SLOPE_LINK_VWApplicationService>();
    container.RegisterType<ISL_SLOPE_LOCK_USER_VWRepository, SL_SLOPE_LOCK_USER_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISL_SLOPE_LOCK_USER_VWApplicationService, SL_SLOPE_LOCK_USER_VWApplicationService>();
    container.RegisterType<ISLOPE_REGION_SECTION_VWRepository, SLOPE_REGION_SECTION_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISLOPE_REGION_SECTION_VWApplicationService, SLOPE_REGION_SECTION_VWApplicationService>();
    container.RegisterType<ISLOPE_SIGNOFF_VWRepository, SLOPE_SIGNOFF_VWRepository>(new InjectionConstructor(unitofWork));
    container.RegisterType<ISLOPE_SIGNOFF_VWApplicationService, SLOPE_SIGNOFF_VWApplicationService>();
